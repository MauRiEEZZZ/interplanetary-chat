// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: interplanterymessage.proto

package main

import (
	fmt "fmt"
	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InterplanteryMessage_Type int32

const (
	InterplanteryMessage_TEXT_MESSAGE           InterplanteryMessage_Type = 0
	InterplanteryMessage_ENCRYPTED_TEXT_MESSAGE InterplanteryMessage_Type = 1
)

var InterplanteryMessage_Type_name = map[int32]string{
	0: "TEXT_MESSAGE",
	1: "ENCRYPTED_TEXT_MESSAGE",
}

var InterplanteryMessage_Type_value = map[string]int32{
	"TEXT_MESSAGE":           0,
	"ENCRYPTED_TEXT_MESSAGE": 1,
}

func (x InterplanteryMessage_Type) Enum() *InterplanteryMessage_Type {
	p := new(InterplanteryMessage_Type)
	*p = x
	return p
}

func (x InterplanteryMessage_Type) String() string {
	return proto.EnumName(InterplanteryMessage_Type_name, int32(x))
}

func (x *InterplanteryMessage_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InterplanteryMessage_Type_value, data, "InterplanteryMessage_Type")
	if err != nil {
		return err
	}
	*x = InterplanteryMessage_Type(value)
	return nil
}

func (InterplanteryMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8c8da033d56db75a, []int{0, 0}
}

type InterplanteryMessage struct {
	Type                 *InterplanteryMessage_Type `protobuf:"varint,1,req,name=type,enum=main.InterplanteryMessage_Type" json:"type,omitempty"`
	TextMessage          *TextMessage               `protobuf:"bytes,2,opt,name=textMessage" json:"textMessage,omitempty"`
	EncryptedTextMessage *EncryptedTextMessage      `protobuf:"bytes,3,opt,name=encryptedTextMessage" json:"encryptedTextMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *InterplanteryMessage) Reset()         { *m = InterplanteryMessage{} }
func (m *InterplanteryMessage) String() string { return proto.CompactTextString(m) }
func (*InterplanteryMessage) ProtoMessage()    {}
func (*InterplanteryMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8da033d56db75a, []int{0}
}
func (m *InterplanteryMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterplanteryMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterplanteryMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterplanteryMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterplanteryMessage.Merge(m, src)
}
func (m *InterplanteryMessage) XXX_Size() int {
	return m.Size()
}
func (m *InterplanteryMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_InterplanteryMessage.DiscardUnknown(m)
}

var xxx_messageInfo_InterplanteryMessage proto.InternalMessageInfo

func (m *InterplanteryMessage) GetType() InterplanteryMessage_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return InterplanteryMessage_TEXT_MESSAGE
}

func (m *InterplanteryMessage) GetTextMessage() *TextMessage {
	if m != nil {
		return m.TextMessage
	}
	return nil
}

func (m *InterplanteryMessage) GetEncryptedTextMessage() *EncryptedTextMessage {
	if m != nil {
		return m.EncryptedTextMessage
	}
	return nil
}

type TextMessage struct {
	Created              *int64   `protobuf:"varint,1,req,name=created" json:"created,omitempty"`
	Text                 *string  `protobuf:"bytes,2,req,name=text" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextMessage) Reset()         { *m = TextMessage{} }
func (m *TextMessage) String() string { return proto.CompactTextString(m) }
func (*TextMessage) ProtoMessage()    {}
func (*TextMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8da033d56db75a, []int{1}
}
func (m *TextMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TextMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TextMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TextMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextMessage.Merge(m, src)
}
func (m *TextMessage) XXX_Size() int {
	return m.Size()
}
func (m *TextMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TextMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TextMessage proto.InternalMessageInfo

func (m *TextMessage) GetCreated() int64 {
	if m != nil && m.Created != nil {
		return *m.Created
	}
	return 0
}

func (m *TextMessage) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

type EncryptedTextMessage struct {
	Iv                   []byte   `protobuf:"bytes,1,req,name=iv" json:"iv,omitempty"`
	MessageKey           []byte   `protobuf:"bytes,2,req,name=message_key,json=messageKey" json:"message_key,omitempty"`
	UnpaddedLen          *int64   `protobuf:"varint,3,req,name=unpadded_len,json=unpaddedLen" json:"unpadded_len,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,req,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncryptedTextMessage) Reset()         { *m = EncryptedTextMessage{} }
func (m *EncryptedTextMessage) String() string { return proto.CompactTextString(m) }
func (*EncryptedTextMessage) ProtoMessage()    {}
func (*EncryptedTextMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c8da033d56db75a, []int{2}
}
func (m *EncryptedTextMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EncryptedTextMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EncryptedTextMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EncryptedTextMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptedTextMessage.Merge(m, src)
}
func (m *EncryptedTextMessage) XXX_Size() int {
	return m.Size()
}
func (m *EncryptedTextMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptedTextMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptedTextMessage proto.InternalMessageInfo

func (m *EncryptedTextMessage) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

func (m *EncryptedTextMessage) GetMessageKey() []byte {
	if m != nil {
		return m.MessageKey
	}
	return nil
}

func (m *EncryptedTextMessage) GetUnpaddedLen() int64 {
	if m != nil && m.UnpaddedLen != nil {
		return *m.UnpaddedLen
	}
	return 0
}

func (m *EncryptedTextMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("main.InterplanteryMessage_Type", InterplanteryMessage_Type_name, InterplanteryMessage_Type_value)
	proto.RegisterType((*InterplanteryMessage)(nil), "main.InterplanteryMessage")
	proto.RegisterType((*TextMessage)(nil), "main.TextMessage")
	proto.RegisterType((*EncryptedTextMessage)(nil), "main.EncryptedTextMessage")
}

func init() { proto.RegisterFile("interplanterymessage.proto", fileDescriptor_8c8da033d56db75a) }

var fileDescriptor_8c8da033d56db75a = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x9b, 0x6d, 0x40, 0x9c, 0x84, 0x52, 0x87, 0x22, 0x4b, 0x0f, 0x69, 0xcd, 0xa9, 0xa7,
	0x1c, 0x5a, 0x6f, 0x9e, 0xfc, 0x13, 0x44, 0xb4, 0x45, 0xb6, 0x39, 0xe8, 0x29, 0x2c, 0xcd, 0x20,
	0xc1, 0x36, 0x0d, 0xe9, 0x5a, 0xdc, 0x8b, 0x47, 0x9f, 0xc1, 0x47, 0xf2, 0xe8, 0x23, 0x48, 0x7d,
	0x11, 0xc9, 0xb6, 0xc5, 0x08, 0x39, 0xed, 0xec, 0xcc, 0xef, 0xfb, 0xe6, 0x63, 0x17, 0xba, 0x69,
	0xa6, 0xa8, 0xc8, 0xe7, 0xb2, 0x3c, 0xf4, 0x82, 0x56, 0x2b, 0xf9, 0x44, 0x41, 0x5e, 0x2c, 0xd5,
	0x12, 0xed, 0x85, 0x4c, 0x33, 0xff, 0x9d, 0x41, 0xe7, 0xa6, 0x0a, 0x8d, 0xb7, 0x10, 0x8e, 0xc0,
	0x56, 0x3a, 0x27, 0x6e, 0xf5, 0xd9, 0xa0, 0x35, 0xec, 0x05, 0x25, 0x1d, 0xd4, 0x91, 0x41, 0xa4,
	0x73, 0x12, 0x06, 0xc6, 0x11, 0x38, 0x8a, 0x5e, 0xd5, 0x6e, 0xc2, 0x59, 0xdf, 0x1a, 0x38, 0xc3,
	0xa3, 0xad, 0x36, 0xfa, 0x1b, 0x88, 0x2a, 0x85, 0x13, 0xe8, 0x50, 0x36, 0x2b, 0x74, 0xae, 0x28,
	0xa9, 0x40, 0xbc, 0x69, 0xd4, 0xdd, 0xad, 0x3a, 0xac, 0x21, 0x44, 0xad, 0xce, 0x3f, 0x05, 0xbb,
	0x8c, 0x84, 0x6d, 0x70, 0xa3, 0xf0, 0x21, 0x8a, 0xc7, 0xe1, 0x74, 0x7a, 0x7e, 0x1d, 0xb6, 0x1b,
	0xd8, 0x85, 0xe3, 0x70, 0x72, 0x29, 0x1e, 0xef, 0xa3, 0xf0, 0x2a, 0xfe, 0x37, 0xb3, 0xfc, 0x33,
	0x70, 0x2a, 0x26, 0xc8, 0xe1, 0x60, 0x56, 0x90, 0x54, 0x94, 0x98, 0x17, 0x68, 0x8a, 0xfd, 0x15,
	0x11, 0xec, 0x32, 0x3d, 0x67, 0x7d, 0x36, 0x38, 0x14, 0xa6, 0xf6, 0xdf, 0xa0, 0x53, 0x17, 0x10,
	0x5b, 0xc0, 0xd2, 0xb5, 0x31, 0x70, 0x05, 0x4b, 0xd7, 0xd8, 0x03, 0x67, 0xf7, 0x09, 0xf1, 0x33,
	0x69, 0x63, 0xe1, 0x0a, 0xd8, 0xb5, 0x6e, 0x49, 0xe3, 0x09, 0xb8, 0x2f, 0x59, 0x2e, 0x93, 0x84,
	0x92, 0x78, 0x4e, 0x19, 0x6f, 0x9a, 0xdd, 0xce, 0xbe, 0x77, 0x47, 0x59, 0xb9, 0x3f, 0x91, 0x4a,
	0x72, 0xdb, 0x88, 0x4d, 0x7d, 0xd1, 0xfe, 0xdc, 0x78, 0xd6, 0xd7, 0xc6, 0xb3, 0xbe, 0x37, 0x9e,
	0xf5, 0xf1, 0xe3, 0x35, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x85, 0xc8, 0x22, 0xcc, 0xfa, 0x01,
	0x00, 0x00,
}

func (m *InterplanteryMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterplanteryMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterplanteryMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EncryptedTextMessage != nil {
		{
			size, err := m.EncryptedTextMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInterplanterymessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TextMessage != nil {
		{
			size, err := m.TextMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInterplanterymessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintInterplanterymessage(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TextMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TextMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TextMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Text == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(*m.Text)
		copy(dAtA[i:], *m.Text)
		i = encodeVarintInterplanterymessage(dAtA, i, uint64(len(*m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if m.Created == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintInterplanterymessage(dAtA, i, uint64(*m.Created))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EncryptedTextMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EncryptedTextMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EncryptedTextMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintInterplanterymessage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.UnpaddedLen == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i = encodeVarintInterplanterymessage(dAtA, i, uint64(*m.UnpaddedLen))
		i--
		dAtA[i] = 0x18
	}
	if m.MessageKey == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(m.MessageKey)
		copy(dAtA[i:], m.MessageKey)
		i = encodeVarintInterplanterymessage(dAtA, i, uint64(len(m.MessageKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Iv == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		i -= len(m.Iv)
		copy(dAtA[i:], m.Iv)
		i = encodeVarintInterplanterymessage(dAtA, i, uint64(len(m.Iv)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInterplanterymessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovInterplanterymessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterplanteryMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovInterplanterymessage(uint64(*m.Type))
	}
	if m.TextMessage != nil {
		l = m.TextMessage.Size()
		n += 1 + l + sovInterplanterymessage(uint64(l))
	}
	if m.EncryptedTextMessage != nil {
		l = m.EncryptedTextMessage.Size()
		n += 1 + l + sovInterplanterymessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TextMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Created != nil {
		n += 1 + sovInterplanterymessage(uint64(*m.Created))
	}
	if m.Text != nil {
		l = len(*m.Text)
		n += 1 + l + sovInterplanterymessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EncryptedTextMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iv != nil {
		l = len(m.Iv)
		n += 1 + l + sovInterplanterymessage(uint64(l))
	}
	if m.MessageKey != nil {
		l = len(m.MessageKey)
		n += 1 + l + sovInterplanterymessage(uint64(l))
	}
	if m.UnpaddedLen != nil {
		n += 1 + sovInterplanterymessage(uint64(*m.UnpaddedLen))
	}
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovInterplanterymessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInterplanterymessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInterplanterymessage(x uint64) (n int) {
	return sovInterplanterymessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterplanteryMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterplanterymessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterplanteryMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterplanteryMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v InterplanteryMessage_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterplanterymessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= InterplanteryMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterplanterymessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TextMessage == nil {
				m.TextMessage = &TextMessage{}
			}
			if err := m.TextMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedTextMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterplanterymessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EncryptedTextMessage == nil {
				m.EncryptedTextMessage = &EncryptedTextMessage{}
			}
			if err := m.EncryptedTextMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterplanterymessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TextMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterplanterymessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TextMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TextMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterplanterymessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Created = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterplanterymessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Text = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipInterplanterymessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EncryptedTextMessage) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterplanterymessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EncryptedTextMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EncryptedTextMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iv", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterplanterymessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iv = append(m.Iv[:0], dAtA[iNdEx:postIndex]...)
			if m.Iv == nil {
				m.Iv = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterplanterymessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageKey = append(m.MessageKey[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageKey == nil {
				m.MessageKey = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnpaddedLen", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterplanterymessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnpaddedLen = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterplanterymessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		default:
			iNdEx = preIndex
			skippy, err := skipInterplanterymessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInterplanterymessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterplanterymessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterplanterymessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterplanterymessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterplanterymessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInterplanterymessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInterplanterymessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInterplanterymessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInterplanterymessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterplanterymessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInterplanterymessage = fmt.Errorf("proto: unexpected end of group")
)
